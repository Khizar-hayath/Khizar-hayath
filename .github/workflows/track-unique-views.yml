name: Track Daily Unique Views

on:
  schedule:
    - cron: '30 18 * * *'   # 18:30 UTC = 00:00 IST
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-uniques:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (with token)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Fetch GitHub traffic (views)
        id: fetch_views
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          echo "Repository: $REPO"
          # Fetch views endpoint (returns JSON with "views" array)
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/traffic/views" -o /tmp/views.json || true
          if [ ! -s /tmp/views.json ]; then
            echo "Warning: views.json is empty or not created."
          else
            echo "Saved views.json (size=$(stat -c%s /tmp/views.json) bytes)"
          fi
          # Print basic summary for logs
          if jq -e '.views' /tmp/views.json >/dev/null 2>&1; then
            echo "views array found"
            jq -r '. | "count:\(.count) uniques:\(.uniques) | days:\(.views|length)"' /tmp/views.json || true
          else
            echo "No .views array in response (possibly no traffic yet or API returned error)."
            cat /tmp/views.json || true
          fi

      - name: Ensure .github/traffic.json exists and initialize if needed
        run: |
          if [ ! -d .github ]; then mkdir -p .github; fi
          if [ ! -f .github/traffic.json ]; then
            cat > .github/traffic.json <<'JSON'
{
  "total_daily_uniques_sum": 0,
  "last_processed": "1970-01-01T00:00:00Z"
}
JSON
            git add .github/traffic.json || true
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
            git commit -m "Create initial traffic.json" || echo "no changes to commit"
            git push origin HEAD:$DEFAULT_BRANCH || echo "initial push skipped (push failed or not required)"
          else
            echo ".github/traffic.json already exists"
          fi
          cat .github/traffic.json

      - name: Compute new daily uniques since last_processed
        run: |
          LAST=$(jq -r '.last_processed' .github/traffic.json)
          echo "Last processed timestamp: $LAST"

          if [ ! -s /tmp/views.json ]; then
            echo "No views data available in /tmp/views.json — exiting without update."
            exit 0
          fi

          VIEWS_JSON=$(cat /tmp/views.json)

          # Ensure views array exists
          has_views=$(jq -e 'has("views")' /tmp/views.json >/dev/null 2>&1; echo $?)
          if [ "$has_views" -ne 0 ]; then
            echo "API response does not contain 'views' array. Response:"
            cat /tmp/views.json
            echo "Exiting without update."
            exit 0
          fi

          # Sum .uniques for entries with timestamp > LAST
          new_uniques=$(jq --arg last "$LAST" '[.views[] | select(.timestamp > $last) | .uniques] | add // 0' <<<"$VIEWS_JSON")
          new_uniques=${new_uniques:-0}
          echo "New daily uniques to add: $new_uniques"

          # Find newest timestamp in views array (or keep LAST)
          newest_ts=$(jq -r '[.views[] | .timestamp] | max // empty' <<<"$VIEWS_JSON")
          if [ -z "$newest_ts" ]; then
            NEW_LAST="$LAST"
          else
            NEW_LAST="$newest_ts"
          fi
          echo "New last_processed will be: $NEW_LAST"

          # Update traffic.json atomically
          tmpfile=$(mktemp)
          jq --argjson nu "$new_uniques" --arg newlast "$NEW_LAST" \
            '.total_daily_uniques_sum += ($nu // 0) | .last_processed = $newlast' \
            .github/traffic.json > "$tmpfile" && mv "$tmpfile" .github/traffic.json

          echo "Updated .github/traffic.json:"
          cat .github/traffic.json

      - name: Commit & push updated traffic.json (if changed)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
          git add .github/traffic.json
          # Only commit if there is a change staged
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update daily-unique totals (+${{ steps.update-uniques.outputs || 'x' }}) and last_processed" || echo "commit failed"
            git push origin HEAD:$DEFAULT_BRANCH || (echo "Push failed — check Actions permissions or branch protection"; exit 0)
          fi
